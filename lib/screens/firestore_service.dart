import 'package:cloud_firestore/cloud_firestore.dart';

class FirestoreService {
  final FirebaseFirestore _db = FirebaseFirestore.instance;

  // Create a Farmer Profile with a unique ID
  Future<String> createFarmerProfile(String name, String location, String phone, List<Map<String, dynamic>> crops) async {
    try {
      CollectionReference farmers = _db.collection('Farmers');
      
      // Firestore will auto-generate the unique document ID
      DocumentReference docRef = await farmers.add({
        'name': name,
        'location': location,
        'phone': phone,
        'crops': crops,
        'createdAt': FieldValue.serverTimestamp(),  // Auto-set current timestamp
      });

      // Return the document ID generated by Firestore
      return docRef.id;  // Farmer unique ID
    } catch (e) {
      throw Exception('Error creating farmer profile: $e');
    }
  }

  // Create a Customer Profile and return the document ID (unique ID)
  Future<String> createCustomerProfile(String name, String location, String phone, List<String> preferredCrops) async {
    try {
      CollectionReference customers = _db.collection('Customers');
      
      DocumentReference docRef = await customers.add({
        'name': name,
        'location': location,
        'phone': phone,  // Add phone to the customer profile
        'preferredCrops': preferredCrops,
        'createdAt': FieldValue.serverTimestamp(),
      });

      // Return the unique document ID
      return docRef.id;  // Customer unique ID
    } catch (e) {
      throw Exception('Error creating customer profile: $e');
    }
  }

  // Verify the Customer Sign-In using unique ID and name
  Future<bool> verifyCustomerSignIn(String uniqueID, String name) async {
    try {
      // Check if the document with the unique ID exists in the Customers collection
      DocumentSnapshot docSnapshot = await _db.collection('Customers').doc(uniqueID).get();

      if (docSnapshot.exists) {
        // Get the name from the document
        String storedName = docSnapshot['name'];
        return storedName == name; // Compare the stored name with the entered name
      } else {
        return false; // Profile not found
      }
    } catch (e) {
      throw Exception('Error verifying customer profile: $e');
    }
  }

  // Verify the Farmer Sign-In using unique ID and name
  Future<bool> verifyFarmerSignIn(String uniqueID, String name) async {
    try {
      // Check if the document with the unique ID exists in the Farmers collection
      DocumentSnapshot docSnapshot = await _db.collection('Farmers').doc(uniqueID).get();

      if (docSnapshot.exists) {
        // Get the name from the document
        String storedName = docSnapshot['name'];
        return storedName == name; // Compare the stored name with the entered name
      } else {
        return false; // Profile not found
      }
    } catch (e) {
      throw Exception('Error verifying farmer profile: $e');
    }
  }

  // Query Farmers for Customer based on location and preferred crops
  Future<QuerySnapshot> getFarmersForCustomer(String location, List<String> preferredCrops) async {
    Query farmersQuery = FirebaseFirestore.instance.collection('Farmers')
        .where('location', isEqualTo: location);  // Filter by location
    
    // Optionally, filter by preferred crops if the list is not empty
    if (preferredCrops.isNotEmpty) {
      farmersQuery = farmersQuery.where('crops.type', arrayContainsAny: preferredCrops);  // Filter by crop type
    }

    return await farmersQuery.get();
  }

  // Example of pagination for getting Farmers
  Future<QuerySnapshot> getFarmersPaginated(int pageSize) async {
    QuerySnapshot snapshot = await _db.collection('Farmers')
        .limit(pageSize)  // Limit to specified number of results per query
        .get();

    return snapshot;
  }
}
